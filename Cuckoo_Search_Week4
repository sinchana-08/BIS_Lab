import numpy as np
from scipy.special import gamma

# Define the optimization problem (objective function)
def objective_function(x):
    return x**2  # Simple quadratic function

# Generate new solutions using Lévy flight
def levy_flight(beta=1.5, size=1):
    sigma = (gamma(1 + beta) * np.sin(np.pi * beta / 2) / gamma((1 + beta) / 2) * beta * np.cos(np.pi * beta / 2) ** (beta - 1)) ** (1 / beta)
    u = np.random.normal(0, sigma, size)
    v = np.random.normal(0, 1, size)
    step = u / np.abs(v) ** (1 / beta)
    return step

# Cuckoo Search Algorithm
def cuckoo_search(func, n_nests=25, n_iterations=6, p_a=0.25, beta=1.5):
    # Step 1: Initialize nests with random positions
    nests = np.random.uniform(-5, 5, n_nests)  # Nests within the range [-5, 5]
    fitness = np.array([func(x) for x in nests])  # Evaluate fitness of initial nests
    best_solution = nests[np.argmin(fitness)]  # Best solution initialization
    best_fitness = np.min(fitness)
    
    for iteration in range(1, n_iterations + 1):  # Adjusting to 1-based iteration
        # Step 5: Generate new solutions via Lévy flights
        new_nests = nests + levy_flight(beta, size=n_nests)
        new_fitness = np.array([func(x) for x in new_nests])  # Evaluate fitness of new nests
        
        # Step 6: Abandon worst nests
        worst_indices = new_fitness > fitness
        nests[worst_indices] = new_nests[worst_indices]
        fitness[worst_indices] = new_fitness[worst_indices]
        
        # Step 7: Update the best solution found so far
        current_best_fitness = np.min(fitness)
        if current_best_fitness < best_fitness:
            best_fitness = current_best_fitness
            best_solution = nests[np.argmin(fitness)]
        
        # Step 8: Output progress in the form iteration/n_iterations
        print(f"Iteration {iteration}/{n_iterations}, Best Fitness: {best_fitness}")
    
    # Output the best solution found
    return best_solution, best_fitness

# Run the Cuckoo Search algorithm
best_solution, best_fitness = cuckoo_search(objective_function)

print(f"\nBest Solution: {best_solution}")
print(f"Best Fitness: {best_fitness}")
